#include <iostream>
#include <csignal>
#include <cstdlib>
#include <unistd.h>

// Signal handler function
void catcher(int sig) {
    // Prints which signal was caught and by which process
    std::cout << "signal " << sig
              << " caught by process " << getpid() << std::endl;
              //Immediately terminates the process
              //it halts the program completely.
    std::exit(0);
}

int main() {
    // Registers catcher() to handle SIGINT (like Ctrl+C)
    //SIGINT → the signal number for “interrupt” (usually generated by pressing Ctrl+C in the terminal).
    //catcher → pointer to a function with the signature void(int).
    //callback function that will run when SIGINT is delivered.
    //After this call, the next time your process (or its group) gets a SIGINT, your catcher runs instead of the default termination.

//This is the callback function that will run when SIGINT is delivered.
    std::signal(SIGINT, catcher);

    // Sends SIGINT to all processes in the current process group, including itself
    kill(0, SIGINT);

    std::cout << "signal sent, but not caught" << std::endl;
    return 0;
}

/*
 Example output:

 ./a.out
 signal 2 caught by process 14445

| Concept        | Demonstrated                               |
| -------------- | ------------------------------------------ |
| `signal()`     | Install custom signal handler              |
| `kill(0, sig)` | Send signal to all processes in group      |
| `getpid()`     | Show which process handled signal          |
| `exit()`       | Optionally terminate after catching signal |
*/

